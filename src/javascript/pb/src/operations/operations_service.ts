/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 0.0.0
 * source: operations/operations_service.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./structures";
import * as dependency_2 from "./../google/protobuf/timestamp";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export class ApplyOperationRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        operationType?: dependency_1.OperationType;
        args?: number[];
        userId?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("operationType" in data && data.operationType != undefined) {
                this.operationType = data.operationType;
            }
            if ("args" in data && data.args != undefined) {
                this.args = data.args;
            }
            if ("userId" in data && data.userId != undefined) {
                this.userId = data.userId;
            }
        }
    }
    get operationType() {
        return pb_1.Message.getFieldWithDefault(this, 1, dependency_1.OperationType.ADDITION) as dependency_1.OperationType;
    }
    set operationType(value: dependency_1.OperationType) {
        pb_1.Message.setField(this, 1, value);
    }
    get args() {
        return pb_1.Message.getFieldWithDefault(this, 2, []) as number[];
    }
    set args(value: number[]) {
        pb_1.Message.setField(this, 2, value);
    }
    get userId() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set userId(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
        operationType?: dependency_1.OperationType;
        args?: number[];
        userId?: number;
    }): ApplyOperationRequest {
        const message = new ApplyOperationRequest({});
        if (data.operationType != null) {
            message.operationType = data.operationType;
        }
        if (data.args != null) {
            message.args = data.args;
        }
        if (data.userId != null) {
            message.userId = data.userId;
        }
        return message;
    }
    toObject() {
        const data: {
            operationType?: dependency_1.OperationType;
            args?: number[];
            userId?: number;
        } = {};
        if (this.operationType != null) {
            data.operationType = this.operationType;
        }
        if (this.args != null) {
            data.args = this.args;
        }
        if (this.userId != null) {
            data.userId = this.userId;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.operationType != dependency_1.OperationType.ADDITION)
            writer.writeEnum(1, this.operationType);
        if (this.args.length)
            writer.writePackedDouble(2, this.args);
        if (this.userId != 0)
            writer.writeInt64(3, this.userId);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ApplyOperationRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ApplyOperationRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.operationType = reader.readEnum();
                    break;
                case 2:
                    message.args = reader.readPackedDouble();
                    break;
                case 3:
                    message.userId = reader.readInt64();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ApplyOperationRequest {
        return ApplyOperationRequest.deserialize(bytes);
    }
}
export class ApplyOperationResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        record?: dependency_1.Record;
        operation?: dependency_1.Operation;
        currentUserBalance?: dependency_1.Balance;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("record" in data && data.record != undefined) {
                this.record = data.record;
            }
            if ("operation" in data && data.operation != undefined) {
                this.operation = data.operation;
            }
            if ("currentUserBalance" in data && data.currentUserBalance != undefined) {
                this.currentUserBalance = data.currentUserBalance;
            }
        }
    }
    get record() {
        return pb_1.Message.getWrapperField(this, dependency_1.Record, 1) as dependency_1.Record;
    }
    set record(value: dependency_1.Record) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get has_record() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get operation() {
        return pb_1.Message.getWrapperField(this, dependency_1.Operation, 2) as dependency_1.Operation;
    }
    set operation(value: dependency_1.Operation) {
        pb_1.Message.setWrapperField(this, 2, value);
    }
    get has_operation() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get currentUserBalance() {
        return pb_1.Message.getWrapperField(this, dependency_1.Balance, 3) as dependency_1.Balance;
    }
    set currentUserBalance(value: dependency_1.Balance) {
        pb_1.Message.setWrapperField(this, 3, value);
    }
    get has_currentUserBalance() {
        return pb_1.Message.getField(this, 3) != null;
    }
    static fromObject(data: {
        record?: ReturnType<typeof dependency_1.Record.prototype.toObject>;
        operation?: ReturnType<typeof dependency_1.Operation.prototype.toObject>;
        currentUserBalance?: ReturnType<typeof dependency_1.Balance.prototype.toObject>;
    }): ApplyOperationResponse {
        const message = new ApplyOperationResponse({});
        if (data.record != null) {
            message.record = dependency_1.Record.fromObject(data.record);
        }
        if (data.operation != null) {
            message.operation = dependency_1.Operation.fromObject(data.operation);
        }
        if (data.currentUserBalance != null) {
            message.currentUserBalance = dependency_1.Balance.fromObject(data.currentUserBalance);
        }
        return message;
    }
    toObject() {
        const data: {
            record?: ReturnType<typeof dependency_1.Record.prototype.toObject>;
            operation?: ReturnType<typeof dependency_1.Operation.prototype.toObject>;
            currentUserBalance?: ReturnType<typeof dependency_1.Balance.prototype.toObject>;
        } = {};
        if (this.record != null) {
            data.record = this.record.toObject();
        }
        if (this.operation != null) {
            data.operation = this.operation.toObject();
        }
        if (this.currentUserBalance != null) {
            data.currentUserBalance = this.currentUserBalance.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_record)
            writer.writeMessage(1, this.record, () => this.record.serialize(writer));
        if (this.has_operation)
            writer.writeMessage(2, this.operation, () => this.operation.serialize(writer));
        if (this.has_currentUserBalance)
            writer.writeMessage(3, this.currentUserBalance, () => this.currentUserBalance.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ApplyOperationResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ApplyOperationResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.record, () => message.record = dependency_1.Record.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.operation, () => message.operation = dependency_1.Operation.deserialize(reader));
                    break;
                case 3:
                    reader.readMessage(message.currentUserBalance, () => message.currentUserBalance = dependency_1.Balance.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ApplyOperationResponse {
        return ApplyOperationResponse.deserialize(bytes);
    }
}
export class GetUserBalanceRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        userId?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("userId" in data && data.userId != undefined) {
                this.userId = data.userId;
            }
        }
    }
    get userId() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set userId(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        userId?: number;
    }): GetUserBalanceRequest {
        const message = new GetUserBalanceRequest({});
        if (data.userId != null) {
            message.userId = data.userId;
        }
        return message;
    }
    toObject() {
        const data: {
            userId?: number;
        } = {};
        if (this.userId != null) {
            data.userId = this.userId;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.userId != 0)
            writer.writeInt64(1, this.userId);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetUserBalanceRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetUserBalanceRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.userId = reader.readInt64();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GetUserBalanceRequest {
        return GetUserBalanceRequest.deserialize(bytes);
    }
}
export class GetUserBalanceResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        balance?: dependency_1.Balance;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("balance" in data && data.balance != undefined) {
                this.balance = data.balance;
            }
        }
    }
    get balance() {
        return pb_1.Message.getWrapperField(this, dependency_1.Balance, 1) as dependency_1.Balance;
    }
    set balance(value: dependency_1.Balance) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get has_balance() {
        return pb_1.Message.getField(this, 1) != null;
    }
    static fromObject(data: {
        balance?: ReturnType<typeof dependency_1.Balance.prototype.toObject>;
    }): GetUserBalanceResponse {
        const message = new GetUserBalanceResponse({});
        if (data.balance != null) {
            message.balance = dependency_1.Balance.fromObject(data.balance);
        }
        return message;
    }
    toObject() {
        const data: {
            balance?: ReturnType<typeof dependency_1.Balance.prototype.toObject>;
        } = {};
        if (this.balance != null) {
            data.balance = this.balance.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_balance)
            writer.writeMessage(1, this.balance, () => this.balance.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetUserBalanceResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetUserBalanceResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.balance, () => message.balance = dependency_1.Balance.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GetUserBalanceResponse {
        return GetUserBalanceResponse.deserialize(bytes);
    }
}
export class FilterRecordsRequest extends pb_1.Message {
    #one_of_decls: number[][] = [[1], [2], [3]];
    constructor(data?: any[] | ({} & (({
        userId?: number;
    }) | ({
        limit?: number;
    }) | ({
        page?: number;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("userId" in data && data.userId != undefined) {
                this.userId = data.userId;
            }
            if ("limit" in data && data.limit != undefined) {
                this.limit = data.limit;
            }
            if ("page" in data && data.page != undefined) {
                this.page = data.page;
            }
        }
    }
    get userId() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set userId(value: number) {
        pb_1.Message.setOneofField(this, 1, this.#one_of_decls[0], value);
    }
    get has_userId() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get limit() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set limit(value: number) {
        pb_1.Message.setOneofField(this, 2, this.#one_of_decls[1], value);
    }
    get has_limit() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get page() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set page(value: number) {
        pb_1.Message.setOneofField(this, 3, this.#one_of_decls[2], value);
    }
    get has_page() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get _userId() {
        const cases: {
            [index: number]: "none" | "userId";
        } = {
            0: "none",
            1: "userId"
        };
        return cases[pb_1.Message.computeOneofCase(this, [1])];
    }
    get _limit() {
        const cases: {
            [index: number]: "none" | "limit";
        } = {
            0: "none",
            2: "limit"
        };
        return cases[pb_1.Message.computeOneofCase(this, [2])];
    }
    get _page() {
        const cases: {
            [index: number]: "none" | "page";
        } = {
            0: "none",
            3: "page"
        };
        return cases[pb_1.Message.computeOneofCase(this, [3])];
    }
    static fromObject(data: {
        userId?: number;
        limit?: number;
        page?: number;
    }): FilterRecordsRequest {
        const message = new FilterRecordsRequest({});
        if (data.userId != null) {
            message.userId = data.userId;
        }
        if (data.limit != null) {
            message.limit = data.limit;
        }
        if (data.page != null) {
            message.page = data.page;
        }
        return message;
    }
    toObject() {
        const data: {
            userId?: number;
            limit?: number;
            page?: number;
        } = {};
        if (this.userId != null) {
            data.userId = this.userId;
        }
        if (this.limit != null) {
            data.limit = this.limit;
        }
        if (this.page != null) {
            data.page = this.page;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_userId)
            writer.writeInt64(1, this.userId);
        if (this.has_limit)
            writer.writeInt32(2, this.limit);
        if (this.has_page)
            writer.writeInt32(3, this.page);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FilterRecordsRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FilterRecordsRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.userId = reader.readInt64();
                    break;
                case 2:
                    message.limit = reader.readInt32();
                    break;
                case 3:
                    message.page = reader.readInt32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): FilterRecordsRequest {
        return FilterRecordsRequest.deserialize(bytes);
    }
}
export class FilterRecordsResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        records?: dependency_1.Record[];
        totalCount?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("records" in data && data.records != undefined) {
                this.records = data.records;
            }
            if ("totalCount" in data && data.totalCount != undefined) {
                this.totalCount = data.totalCount;
            }
        }
    }
    get records() {
        return pb_1.Message.getRepeatedWrapperField(this, dependency_1.Record, 1) as dependency_1.Record[];
    }
    set records(value: dependency_1.Record[]) {
        pb_1.Message.setRepeatedWrapperField(this, 1, value);
    }
    get totalCount() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set totalCount(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        records?: ReturnType<typeof dependency_1.Record.prototype.toObject>[];
        totalCount?: number;
    }): FilterRecordsResponse {
        const message = new FilterRecordsResponse({});
        if (data.records != null) {
            message.records = data.records.map(item => dependency_1.Record.fromObject(item));
        }
        if (data.totalCount != null) {
            message.totalCount = data.totalCount;
        }
        return message;
    }
    toObject() {
        const data: {
            records?: ReturnType<typeof dependency_1.Record.prototype.toObject>[];
            totalCount?: number;
        } = {};
        if (this.records != null) {
            data.records = this.records.map((item: dependency_1.Record) => item.toObject());
        }
        if (this.totalCount != null) {
            data.totalCount = this.totalCount;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.records.length)
            writer.writeRepeatedMessage(1, this.records, (item: dependency_1.Record) => item.serialize(writer));
        if (this.totalCount != 0)
            writer.writeInt64(2, this.totalCount);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FilterRecordsResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FilterRecordsResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.records, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_1.Record.deserialize(reader), dependency_1.Record));
                    break;
                case 2:
                    message.totalCount = reader.readInt64();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): FilterRecordsResponse {
        return FilterRecordsResponse.deserialize(bytes);
    }
}
export class DeleteRecordsRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        recordIds?: number[];
        userId?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("recordIds" in data && data.recordIds != undefined) {
                this.recordIds = data.recordIds;
            }
            if ("userId" in data && data.userId != undefined) {
                this.userId = data.userId;
            }
        }
    }
    get recordIds() {
        return pb_1.Message.getFieldWithDefault(this, 1, []) as number[];
    }
    set recordIds(value: number[]) {
        pb_1.Message.setField(this, 1, value);
    }
    get userId() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set userId(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        recordIds?: number[];
        userId?: number;
    }): DeleteRecordsRequest {
        const message = new DeleteRecordsRequest({});
        if (data.recordIds != null) {
            message.recordIds = data.recordIds;
        }
        if (data.userId != null) {
            message.userId = data.userId;
        }
        return message;
    }
    toObject() {
        const data: {
            recordIds?: number[];
            userId?: number;
        } = {};
        if (this.recordIds != null) {
            data.recordIds = this.recordIds;
        }
        if (this.userId != null) {
            data.userId = this.userId;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.recordIds.length)
            writer.writePackedInt64(1, this.recordIds);
        if (this.userId != 0)
            writer.writeInt64(2, this.userId);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteRecordsRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteRecordsRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.recordIds = reader.readPackedInt64();
                    break;
                case 2:
                    message.userId = reader.readInt64();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): DeleteRecordsRequest {
        return DeleteRecordsRequest.deserialize(bytes);
    }
}
export class DeleteRecordsResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        records?: dependency_1.Record[];
        currentBalance?: dependency_1.Balance;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("records" in data && data.records != undefined) {
                this.records = data.records;
            }
            if ("currentBalance" in data && data.currentBalance != undefined) {
                this.currentBalance = data.currentBalance;
            }
        }
    }
    get records() {
        return pb_1.Message.getRepeatedWrapperField(this, dependency_1.Record, 1) as dependency_1.Record[];
    }
    set records(value: dependency_1.Record[]) {
        pb_1.Message.setRepeatedWrapperField(this, 1, value);
    }
    get currentBalance() {
        return pb_1.Message.getWrapperField(this, dependency_1.Balance, 2) as dependency_1.Balance;
    }
    set currentBalance(value: dependency_1.Balance) {
        pb_1.Message.setWrapperField(this, 2, value);
    }
    get has_currentBalance() {
        return pb_1.Message.getField(this, 2) != null;
    }
    static fromObject(data: {
        records?: ReturnType<typeof dependency_1.Record.prototype.toObject>[];
        currentBalance?: ReturnType<typeof dependency_1.Balance.prototype.toObject>;
    }): DeleteRecordsResponse {
        const message = new DeleteRecordsResponse({});
        if (data.records != null) {
            message.records = data.records.map(item => dependency_1.Record.fromObject(item));
        }
        if (data.currentBalance != null) {
            message.currentBalance = dependency_1.Balance.fromObject(data.currentBalance);
        }
        return message;
    }
    toObject() {
        const data: {
            records?: ReturnType<typeof dependency_1.Record.prototype.toObject>[];
            currentBalance?: ReturnType<typeof dependency_1.Balance.prototype.toObject>;
        } = {};
        if (this.records != null) {
            data.records = this.records.map((item: dependency_1.Record) => item.toObject());
        }
        if (this.currentBalance != null) {
            data.currentBalance = this.currentBalance.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.records.length)
            writer.writeRepeatedMessage(1, this.records, (item: dependency_1.Record) => item.serialize(writer));
        if (this.has_currentBalance)
            writer.writeMessage(2, this.currentBalance, () => this.currentBalance.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteRecordsResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteRecordsResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.records, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_1.Record.deserialize(reader), dependency_1.Record));
                    break;
                case 2:
                    reader.readMessage(message.currentBalance, () => message.currentBalance = dependency_1.Balance.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): DeleteRecordsResponse {
        return DeleteRecordsResponse.deserialize(bytes);
    }
}
interface GrpcUnaryServiceInterface<P, R> {
    (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
}
interface GrpcStreamServiceInterface<P, R> {
    (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
}
interface GrpWritableServiceInterface<P, R> {
    (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
}
interface GrpcChunkServiceInterface<P, R> {
    (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
}
interface GrpcPromiseServiceInterface<P, R> {
    (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
    (message: P, options?: grpc_1.CallOptions): Promise<R>;
}
export abstract class UnimplementedOperationsServiceService {
    static definition = {
        ApplyOperation: {
            path: "/pb.operations.OperationsService/ApplyOperation",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: ApplyOperationRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => ApplyOperationRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: ApplyOperationResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => ApplyOperationResponse.deserialize(new Uint8Array(bytes))
        },
        GetUserBalance: {
            path: "/pb.operations.OperationsService/GetUserBalance",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: GetUserBalanceRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => GetUserBalanceRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: GetUserBalanceResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => GetUserBalanceResponse.deserialize(new Uint8Array(bytes))
        },
        FilterRecords: {
            path: "/pb.operations.OperationsService/FilterRecords",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: FilterRecordsRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => FilterRecordsRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: FilterRecordsResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => FilterRecordsResponse.deserialize(new Uint8Array(bytes))
        },
        DeleteRecords: {
            path: "/pb.operations.OperationsService/DeleteRecords",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: DeleteRecordsRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => DeleteRecordsRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: DeleteRecordsResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => DeleteRecordsResponse.deserialize(new Uint8Array(bytes))
        }
    };
    [method: string]: grpc_1.UntypedHandleCall;
    abstract ApplyOperation(call: grpc_1.ServerUnaryCall<ApplyOperationRequest, ApplyOperationResponse>, callback: grpc_1.sendUnaryData<ApplyOperationResponse>): void;
    abstract GetUserBalance(call: grpc_1.ServerUnaryCall<GetUserBalanceRequest, GetUserBalanceResponse>, callback: grpc_1.sendUnaryData<GetUserBalanceResponse>): void;
    abstract FilterRecords(call: grpc_1.ServerUnaryCall<FilterRecordsRequest, FilterRecordsResponse>, callback: grpc_1.sendUnaryData<FilterRecordsResponse>): void;
    abstract DeleteRecords(call: grpc_1.ServerUnaryCall<DeleteRecordsRequest, DeleteRecordsResponse>, callback: grpc_1.sendUnaryData<DeleteRecordsResponse>): void;
}
export class OperationsServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedOperationsServiceService.definition, "OperationsService", {}) {
    constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
        super(address, credentials, options);
    }
    ApplyOperation: GrpcPromiseServiceInterface<ApplyOperationRequest, ApplyOperationResponse> = (message: ApplyOperationRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<ApplyOperationResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.ApplyOperation(message, metadata, options, (error: grpc_1.ServiceError, response: ApplyOperationResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    GetUserBalance: GrpcPromiseServiceInterface<GetUserBalanceRequest, GetUserBalanceResponse> = (message: GetUserBalanceRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<GetUserBalanceResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.GetUserBalance(message, metadata, options, (error: grpc_1.ServiceError, response: GetUserBalanceResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    FilterRecords: GrpcPromiseServiceInterface<FilterRecordsRequest, FilterRecordsResponse> = (message: FilterRecordsRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<FilterRecordsResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.FilterRecords(message, metadata, options, (error: grpc_1.ServiceError, response: FilterRecordsResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    DeleteRecords: GrpcPromiseServiceInterface<DeleteRecordsRequest, DeleteRecordsResponse> = (message: DeleteRecordsRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<DeleteRecordsResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.DeleteRecords(message, metadata, options, (error: grpc_1.ServiceError, response: DeleteRecordsResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
}
