/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 0.0.0
 * source: users/users_service.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./structures";
import * as dependency_2 from "./../google/protobuf/timestamp";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export class CreateUserRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        username?: string;
        password?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("username" in data && data.username != undefined) {
                this.username = data.username;
            }
            if ("password" in data && data.password != undefined) {
                this.password = data.password;
            }
        }
    }
    get username() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set username(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get password() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set password(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        username?: string;
        password?: string;
    }): CreateUserRequest {
        const message = new CreateUserRequest({});
        if (data.username != null) {
            message.username = data.username;
        }
        if (data.password != null) {
            message.password = data.password;
        }
        return message;
    }
    toObject() {
        const data: {
            username?: string;
            password?: string;
        } = {};
        if (this.username != null) {
            data.username = this.username;
        }
        if (this.password != null) {
            data.password = this.password;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.username.length)
            writer.writeString(1, this.username);
        if (this.password.length)
            writer.writeString(2, this.password);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateUserRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateUserRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.username = reader.readString();
                    break;
                case 2:
                    message.password = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): CreateUserRequest {
        return CreateUserRequest.deserialize(bytes);
    }
}
export class CreateUserResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        user?: dependency_1.User;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("user" in data && data.user != undefined) {
                this.user = data.user;
            }
        }
    }
    get user() {
        return pb_1.Message.getWrapperField(this, dependency_1.User, 1) as dependency_1.User;
    }
    set user(value: dependency_1.User) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get has_user() {
        return pb_1.Message.getField(this, 1) != null;
    }
    static fromObject(data: {
        user?: ReturnType<typeof dependency_1.User.prototype.toObject>;
    }): CreateUserResponse {
        const message = new CreateUserResponse({});
        if (data.user != null) {
            message.user = dependency_1.User.fromObject(data.user);
        }
        return message;
    }
    toObject() {
        const data: {
            user?: ReturnType<typeof dependency_1.User.prototype.toObject>;
        } = {};
        if (this.user != null) {
            data.user = this.user.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_user)
            writer.writeMessage(1, this.user, () => this.user.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateUserResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateUserResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.user, () => message.user = dependency_1.User.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): CreateUserResponse {
        return CreateUserResponse.deserialize(bytes);
    }
}
export class GetUserRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set id(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        id?: number;
    }): GetUserRequest {
        const message = new GetUserRequest({});
        if (data.id != null) {
            message.id = data.id;
        }
        return message;
    }
    toObject() {
        const data: {
            id?: number;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id != 0)
            writer.writeInt64(1, this.id);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetUserRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetUserRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readInt64();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GetUserRequest {
        return GetUserRequest.deserialize(bytes);
    }
}
export class GetUserResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        user?: dependency_1.User;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("user" in data && data.user != undefined) {
                this.user = data.user;
            }
        }
    }
    get user() {
        return pb_1.Message.getWrapperField(this, dependency_1.User, 1) as dependency_1.User;
    }
    set user(value: dependency_1.User) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get has_user() {
        return pb_1.Message.getField(this, 1) != null;
    }
    static fromObject(data: {
        user?: ReturnType<typeof dependency_1.User.prototype.toObject>;
    }): GetUserResponse {
        const message = new GetUserResponse({});
        if (data.user != null) {
            message.user = dependency_1.User.fromObject(data.user);
        }
        return message;
    }
    toObject() {
        const data: {
            user?: ReturnType<typeof dependency_1.User.prototype.toObject>;
        } = {};
        if (this.user != null) {
            data.user = this.user.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_user)
            writer.writeMessage(1, this.user, () => this.user.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetUserResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetUserResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.user, () => message.user = dependency_1.User.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GetUserResponse {
        return GetUserResponse.deserialize(bytes);
    }
}
export class GetUserByUsernameRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        username?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("username" in data && data.username != undefined) {
                this.username = data.username;
            }
        }
    }
    get username() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set username(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        username?: string;
    }): GetUserByUsernameRequest {
        const message = new GetUserByUsernameRequest({});
        if (data.username != null) {
            message.username = data.username;
        }
        return message;
    }
    toObject() {
        const data: {
            username?: string;
        } = {};
        if (this.username != null) {
            data.username = this.username;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.username.length)
            writer.writeString(1, this.username);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetUserByUsernameRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetUserByUsernameRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.username = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GetUserByUsernameRequest {
        return GetUserByUsernameRequest.deserialize(bytes);
    }
}
export class GetUserByUsernameResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        user?: dependency_1.User;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("user" in data && data.user != undefined) {
                this.user = data.user;
            }
        }
    }
    get user() {
        return pb_1.Message.getWrapperField(this, dependency_1.User, 1) as dependency_1.User;
    }
    set user(value: dependency_1.User) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get has_user() {
        return pb_1.Message.getField(this, 1) != null;
    }
    static fromObject(data: {
        user?: ReturnType<typeof dependency_1.User.prototype.toObject>;
    }): GetUserByUsernameResponse {
        const message = new GetUserByUsernameResponse({});
        if (data.user != null) {
            message.user = dependency_1.User.fromObject(data.user);
        }
        return message;
    }
    toObject() {
        const data: {
            user?: ReturnType<typeof dependency_1.User.prototype.toObject>;
        } = {};
        if (this.user != null) {
            data.user = this.user.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_user)
            writer.writeMessage(1, this.user, () => this.user.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetUserByUsernameResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetUserByUsernameResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.user, () => message.user = dependency_1.User.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GetUserByUsernameResponse {
        return GetUserByUsernameResponse.deserialize(bytes);
    }
}
export class DeleteUserRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set id(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        id?: number;
    }): DeleteUserRequest {
        const message = new DeleteUserRequest({});
        if (data.id != null) {
            message.id = data.id;
        }
        return message;
    }
    toObject() {
        const data: {
            id?: number;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id != 0)
            writer.writeInt64(1, this.id);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteUserRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteUserRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readInt64();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): DeleteUserRequest {
        return DeleteUserRequest.deserialize(bytes);
    }
}
export class DeleteUserResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        user?: dependency_1.User;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("user" in data && data.user != undefined) {
                this.user = data.user;
            }
        }
    }
    get user() {
        return pb_1.Message.getWrapperField(this, dependency_1.User, 1) as dependency_1.User;
    }
    set user(value: dependency_1.User) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get has_user() {
        return pb_1.Message.getField(this, 1) != null;
    }
    static fromObject(data: {
        user?: ReturnType<typeof dependency_1.User.prototype.toObject>;
    }): DeleteUserResponse {
        const message = new DeleteUserResponse({});
        if (data.user != null) {
            message.user = dependency_1.User.fromObject(data.user);
        }
        return message;
    }
    toObject() {
        const data: {
            user?: ReturnType<typeof dependency_1.User.prototype.toObject>;
        } = {};
        if (this.user != null) {
            data.user = this.user.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_user)
            writer.writeMessage(1, this.user, () => this.user.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteUserResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteUserResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.user, () => message.user = dependency_1.User.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): DeleteUserResponse {
        return DeleteUserResponse.deserialize(bytes);
    }
}
export class CheckUserCredentialsRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        username?: string;
        password?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("username" in data && data.username != undefined) {
                this.username = data.username;
            }
            if ("password" in data && data.password != undefined) {
                this.password = data.password;
            }
        }
    }
    get username() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set username(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get password() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set password(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        username?: string;
        password?: string;
    }): CheckUserCredentialsRequest {
        const message = new CheckUserCredentialsRequest({});
        if (data.username != null) {
            message.username = data.username;
        }
        if (data.password != null) {
            message.password = data.password;
        }
        return message;
    }
    toObject() {
        const data: {
            username?: string;
            password?: string;
        } = {};
        if (this.username != null) {
            data.username = this.username;
        }
        if (this.password != null) {
            data.password = this.password;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.username.length)
            writer.writeString(1, this.username);
        if (this.password.length)
            writer.writeString(2, this.password);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CheckUserCredentialsRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CheckUserCredentialsRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.username = reader.readString();
                    break;
                case 2:
                    message.password = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): CheckUserCredentialsRequest {
        return CheckUserCredentialsRequest.deserialize(bytes);
    }
}
export class CheckUserCredentialsResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        user?: dependency_1.User;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("user" in data && data.user != undefined) {
                this.user = data.user;
            }
        }
    }
    get user() {
        return pb_1.Message.getWrapperField(this, dependency_1.User, 1) as dependency_1.User;
    }
    set user(value: dependency_1.User) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get has_user() {
        return pb_1.Message.getField(this, 1) != null;
    }
    static fromObject(data: {
        user?: ReturnType<typeof dependency_1.User.prototype.toObject>;
    }): CheckUserCredentialsResponse {
        const message = new CheckUserCredentialsResponse({});
        if (data.user != null) {
            message.user = dependency_1.User.fromObject(data.user);
        }
        return message;
    }
    toObject() {
        const data: {
            user?: ReturnType<typeof dependency_1.User.prototype.toObject>;
        } = {};
        if (this.user != null) {
            data.user = this.user.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_user)
            writer.writeMessage(1, this.user, () => this.user.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CheckUserCredentialsResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CheckUserCredentialsResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.user, () => message.user = dependency_1.User.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): CheckUserCredentialsResponse {
        return CheckUserCredentialsResponse.deserialize(bytes);
    }
}
interface GrpcUnaryServiceInterface<P, R> {
    (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
}
interface GrpcStreamServiceInterface<P, R> {
    (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
}
interface GrpWritableServiceInterface<P, R> {
    (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
}
interface GrpcChunkServiceInterface<P, R> {
    (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
}
interface GrpcPromiseServiceInterface<P, R> {
    (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
    (message: P, options?: grpc_1.CallOptions): Promise<R>;
}
export abstract class UnimplementedUserServiceService {
    static definition = {
        CheckUserCredentials: {
            path: "/pb.users.UserService/CheckUserCredentials",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: CheckUserCredentialsRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => CheckUserCredentialsRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: CheckUserCredentialsResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => CheckUserCredentialsResponse.deserialize(new Uint8Array(bytes))
        },
        CreateUser: {
            path: "/pb.users.UserService/CreateUser",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: CreateUserRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => CreateUserRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: CreateUserResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => CreateUserResponse.deserialize(new Uint8Array(bytes))
        },
        GetUser: {
            path: "/pb.users.UserService/GetUser",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: GetUserRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => GetUserRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: GetUserResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => GetUserResponse.deserialize(new Uint8Array(bytes))
        },
        GetUserByUsername: {
            path: "/pb.users.UserService/GetUserByUsername",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: GetUserByUsernameRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => GetUserByUsernameRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: GetUserByUsernameResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => GetUserByUsernameResponse.deserialize(new Uint8Array(bytes))
        },
        DeleteUser: {
            path: "/pb.users.UserService/DeleteUser",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: DeleteUserRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => DeleteUserRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: DeleteUserResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => DeleteUserResponse.deserialize(new Uint8Array(bytes))
        }
    };
    [method: string]: grpc_1.UntypedHandleCall;
    abstract CheckUserCredentials(call: grpc_1.ServerUnaryCall<CheckUserCredentialsRequest, CheckUserCredentialsResponse>, callback: grpc_1.sendUnaryData<CheckUserCredentialsResponse>): void;
    abstract CreateUser(call: grpc_1.ServerUnaryCall<CreateUserRequest, CreateUserResponse>, callback: grpc_1.sendUnaryData<CreateUserResponse>): void;
    abstract GetUser(call: grpc_1.ServerUnaryCall<GetUserRequest, GetUserResponse>, callback: grpc_1.sendUnaryData<GetUserResponse>): void;
    abstract GetUserByUsername(call: grpc_1.ServerUnaryCall<GetUserByUsernameRequest, GetUserByUsernameResponse>, callback: grpc_1.sendUnaryData<GetUserByUsernameResponse>): void;
    abstract DeleteUser(call: grpc_1.ServerUnaryCall<DeleteUserRequest, DeleteUserResponse>, callback: grpc_1.sendUnaryData<DeleteUserResponse>): void;
}
export class UserServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedUserServiceService.definition, "UserService", {}) {
    constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
        super(address, credentials, options);
    }
    CheckUserCredentials: GrpcPromiseServiceInterface<CheckUserCredentialsRequest, CheckUserCredentialsResponse> = (message: CheckUserCredentialsRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<CheckUserCredentialsResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.CheckUserCredentials(message, metadata, options, (error: grpc_1.ServiceError, response: CheckUserCredentialsResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    CreateUser: GrpcPromiseServiceInterface<CreateUserRequest, CreateUserResponse> = (message: CreateUserRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<CreateUserResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.CreateUser(message, metadata, options, (error: grpc_1.ServiceError, response: CreateUserResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    GetUser: GrpcPromiseServiceInterface<GetUserRequest, GetUserResponse> = (message: GetUserRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<GetUserResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.GetUser(message, metadata, options, (error: grpc_1.ServiceError, response: GetUserResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    GetUserByUsername: GrpcPromiseServiceInterface<GetUserByUsernameRequest, GetUserByUsernameResponse> = (message: GetUserByUsernameRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<GetUserByUsernameResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.GetUserByUsername(message, metadata, options, (error: grpc_1.ServiceError, response: GetUserByUsernameResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
    DeleteUser: GrpcPromiseServiceInterface<DeleteUserRequest, DeleteUserResponse> = (message: DeleteUserRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): Promise<DeleteUserResponse> => { if (!metadata) {
        metadata = new grpc_1.Metadata;
    } if (!options) {
        options = {};
    } return new Promise((resolve, reject) => super.DeleteUser(message, metadata, options, (error: grpc_1.ServiceError, response: DeleteUserResponse) => {
        if (error) {
            reject(error);
        }
        else {
            resolve(response);
        }
    })); };
}
