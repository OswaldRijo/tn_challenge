// @generated by protobuf-ts 2.9.4 with parameter generate_dependencies,long_type_string,optimize_code_size
// @generated from protobuf file "operations/operations_service.proto" (package "pb.operations", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { OperationsService } from "./operations_service";
import type { DeleteRecordsResponse } from "./operations_service";
import type { DeleteRecordsRequest } from "./operations_service";
import type { FilterRecordsResponse } from "./operations_service";
import type { FilterRecordsRequest } from "./operations_service";
import type { GetUserBalanceResponse } from "./operations_service";
import type { GetUserBalanceRequest } from "./operations_service";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { ApplyOperationResponse } from "./operations_service";
import type { ApplyOperationRequest } from "./operations_service";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service pb.operations.OperationsService
 */
export interface IOperationsServiceClient {
    /**
     * @generated from protobuf rpc: ApplyOperation(pb.operations.ApplyOperationRequest) returns (pb.operations.ApplyOperationResponse);
     */
    applyOperation(input: ApplyOperationRequest, options?: RpcOptions): UnaryCall<ApplyOperationRequest, ApplyOperationResponse>;
    /**
     * @generated from protobuf rpc: GetUserBalance(pb.operations.GetUserBalanceRequest) returns (pb.operations.GetUserBalanceResponse);
     */
    getUserBalance(input: GetUserBalanceRequest, options?: RpcOptions): UnaryCall<GetUserBalanceRequest, GetUserBalanceResponse>;
    /**
     * @generated from protobuf rpc: FilterRecords(pb.operations.FilterRecordsRequest) returns (pb.operations.FilterRecordsResponse);
     */
    filterRecords(input: FilterRecordsRequest, options?: RpcOptions): UnaryCall<FilterRecordsRequest, FilterRecordsResponse>;
    /**
     * @generated from protobuf rpc: DeleteRecords(pb.operations.DeleteRecordsRequest) returns (pb.operations.DeleteRecordsResponse);
     */
    deleteRecords(input: DeleteRecordsRequest, options?: RpcOptions): UnaryCall<DeleteRecordsRequest, DeleteRecordsResponse>;
}
/**
 * @generated from protobuf service pb.operations.OperationsService
 */
export class OperationsServiceClient implements IOperationsServiceClient, ServiceInfo {
    typeName = OperationsService.typeName;
    methods = OperationsService.methods;
    options = OperationsService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: ApplyOperation(pb.operations.ApplyOperationRequest) returns (pb.operations.ApplyOperationResponse);
     */
    applyOperation(input: ApplyOperationRequest, options?: RpcOptions): UnaryCall<ApplyOperationRequest, ApplyOperationResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<ApplyOperationRequest, ApplyOperationResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetUserBalance(pb.operations.GetUserBalanceRequest) returns (pb.operations.GetUserBalanceResponse);
     */
    getUserBalance(input: GetUserBalanceRequest, options?: RpcOptions): UnaryCall<GetUserBalanceRequest, GetUserBalanceResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetUserBalanceRequest, GetUserBalanceResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: FilterRecords(pb.operations.FilterRecordsRequest) returns (pb.operations.FilterRecordsResponse);
     */
    filterRecords(input: FilterRecordsRequest, options?: RpcOptions): UnaryCall<FilterRecordsRequest, FilterRecordsResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<FilterRecordsRequest, FilterRecordsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DeleteRecords(pb.operations.DeleteRecordsRequest) returns (pb.operations.DeleteRecordsResponse);
     */
    deleteRecords(input: DeleteRecordsRequest, options?: RpcOptions): UnaryCall<DeleteRecordsRequest, DeleteRecordsResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeleteRecordsRequest, DeleteRecordsResponse>("unary", this._transport, method, opt, input);
    }
}
