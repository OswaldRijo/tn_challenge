/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 0.0.0
 * source: operations/structures.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../google/protobuf/timestamp";
import * as pb_1 from "google-protobuf";
export enum OperationType {
    ADDITION = 0,
    SUBTRACTION = 1,
    MULTIPLICATION = 2,
    DIVISION = 3,
    SQUARE_ROOT = 4,
    RANDOM_STRING = 5
}
export class Balance extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: number;
        userId?: number;
        currentBalance?: number;
        createdAt?: dependency_1.Timestamp;
        updatedAt?: dependency_1.Timestamp;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("userId" in data && data.userId != undefined) {
                this.userId = data.userId;
            }
            if ("currentBalance" in data && data.currentBalance != undefined) {
                this.currentBalance = data.currentBalance;
            }
            if ("createdAt" in data && data.createdAt != undefined) {
                this.createdAt = data.createdAt;
            }
            if ("updatedAt" in data && data.updatedAt != undefined) {
                this.updatedAt = data.updatedAt;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set id(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get userId() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set userId(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get currentBalance() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set currentBalance(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    get createdAt() {
        return pb_1.Message.getWrapperField(this, dependency_1.Timestamp, 4) as dependency_1.Timestamp;
    }
    set createdAt(value: dependency_1.Timestamp) {
        pb_1.Message.setWrapperField(this, 4, value);
    }
    get has_createdAt() {
        return pb_1.Message.getField(this, 4) != null;
    }
    get updatedAt() {
        return pb_1.Message.getWrapperField(this, dependency_1.Timestamp, 5) as dependency_1.Timestamp;
    }
    set updatedAt(value: dependency_1.Timestamp) {
        pb_1.Message.setWrapperField(this, 5, value);
    }
    get has_updatedAt() {
        return pb_1.Message.getField(this, 5) != null;
    }
    static fromObject(data: {
        id?: number;
        userId?: number;
        currentBalance?: number;
        createdAt?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
        updatedAt?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
    }): Balance {
        const message = new Balance({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.userId != null) {
            message.userId = data.userId;
        }
        if (data.currentBalance != null) {
            message.currentBalance = data.currentBalance;
        }
        if (data.createdAt != null) {
            message.createdAt = dependency_1.Timestamp.fromObject(data.createdAt);
        }
        if (data.updatedAt != null) {
            message.updatedAt = dependency_1.Timestamp.fromObject(data.updatedAt);
        }
        return message;
    }
    toObject() {
        const data: {
            id?: number;
            userId?: number;
            currentBalance?: number;
            createdAt?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
            updatedAt?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.userId != null) {
            data.userId = this.userId;
        }
        if (this.currentBalance != null) {
            data.currentBalance = this.currentBalance;
        }
        if (this.createdAt != null) {
            data.createdAt = this.createdAt.toObject();
        }
        if (this.updatedAt != null) {
            data.updatedAt = this.updatedAt.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id != 0)
            writer.writeInt64(1, this.id);
        if (this.userId != 0)
            writer.writeInt64(2, this.userId);
        if (this.currentBalance != 0)
            writer.writeDouble(3, this.currentBalance);
        if (this.has_createdAt)
            writer.writeMessage(4, this.createdAt, () => this.createdAt.serialize(writer));
        if (this.has_updatedAt)
            writer.writeMessage(5, this.updatedAt, () => this.updatedAt.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Balance {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Balance();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readInt64();
                    break;
                case 2:
                    message.userId = reader.readInt64();
                    break;
                case 3:
                    message.currentBalance = reader.readDouble();
                    break;
                case 4:
                    reader.readMessage(message.createdAt, () => message.createdAt = dependency_1.Timestamp.deserialize(reader));
                    break;
                case 5:
                    reader.readMessage(message.updatedAt, () => message.updatedAt = dependency_1.Timestamp.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Balance {
        return Balance.deserialize(bytes);
    }
}
export class Operation extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: number;
        userId?: number;
        operationType?: OperationType;
        cost?: number;
        args?: string;
        createdAt?: dependency_1.Timestamp;
        updatedAt?: dependency_1.Timestamp;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("userId" in data && data.userId != undefined) {
                this.userId = data.userId;
            }
            if ("operationType" in data && data.operationType != undefined) {
                this.operationType = data.operationType;
            }
            if ("cost" in data && data.cost != undefined) {
                this.cost = data.cost;
            }
            if ("args" in data && data.args != undefined) {
                this.args = data.args;
            }
            if ("createdAt" in data && data.createdAt != undefined) {
                this.createdAt = data.createdAt;
            }
            if ("updatedAt" in data && data.updatedAt != undefined) {
                this.updatedAt = data.updatedAt;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set id(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get userId() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set userId(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get operationType() {
        return pb_1.Message.getFieldWithDefault(this, 3, OperationType.ADDITION) as OperationType;
    }
    set operationType(value: OperationType) {
        pb_1.Message.setField(this, 3, value);
    }
    get cost() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
    }
    set cost(value: number) {
        pb_1.Message.setField(this, 4, value);
    }
    get args() {
        return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
    }
    set args(value: string) {
        pb_1.Message.setField(this, 5, value);
    }
    get createdAt() {
        return pb_1.Message.getWrapperField(this, dependency_1.Timestamp, 6) as dependency_1.Timestamp;
    }
    set createdAt(value: dependency_1.Timestamp) {
        pb_1.Message.setWrapperField(this, 6, value);
    }
    get has_createdAt() {
        return pb_1.Message.getField(this, 6) != null;
    }
    get updatedAt() {
        return pb_1.Message.getWrapperField(this, dependency_1.Timestamp, 7) as dependency_1.Timestamp;
    }
    set updatedAt(value: dependency_1.Timestamp) {
        pb_1.Message.setWrapperField(this, 7, value);
    }
    get has_updatedAt() {
        return pb_1.Message.getField(this, 7) != null;
    }
    static fromObject(data: {
        id?: number;
        userId?: number;
        operationType?: OperationType;
        cost?: number;
        args?: string;
        createdAt?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
        updatedAt?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
    }): Operation {
        const message = new Operation({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.userId != null) {
            message.userId = data.userId;
        }
        if (data.operationType != null) {
            message.operationType = data.operationType;
        }
        if (data.cost != null) {
            message.cost = data.cost;
        }
        if (data.args != null) {
            message.args = data.args;
        }
        if (data.createdAt != null) {
            message.createdAt = dependency_1.Timestamp.fromObject(data.createdAt);
        }
        if (data.updatedAt != null) {
            message.updatedAt = dependency_1.Timestamp.fromObject(data.updatedAt);
        }
        return message;
    }
    toObject() {
        const data: {
            id?: number;
            userId?: number;
            operationType?: OperationType;
            cost?: number;
            args?: string;
            createdAt?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
            updatedAt?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.userId != null) {
            data.userId = this.userId;
        }
        if (this.operationType != null) {
            data.operationType = this.operationType;
        }
        if (this.cost != null) {
            data.cost = this.cost;
        }
        if (this.args != null) {
            data.args = this.args;
        }
        if (this.createdAt != null) {
            data.createdAt = this.createdAt.toObject();
        }
        if (this.updatedAt != null) {
            data.updatedAt = this.updatedAt.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id != 0)
            writer.writeInt64(1, this.id);
        if (this.userId != 0)
            writer.writeInt64(2, this.userId);
        if (this.operationType != OperationType.ADDITION)
            writer.writeEnum(3, this.operationType);
        if (this.cost != 0)
            writer.writeDouble(4, this.cost);
        if (this.args.length)
            writer.writeString(5, this.args);
        if (this.has_createdAt)
            writer.writeMessage(6, this.createdAt, () => this.createdAt.serialize(writer));
        if (this.has_updatedAt)
            writer.writeMessage(7, this.updatedAt, () => this.updatedAt.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Operation {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Operation();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readInt64();
                    break;
                case 2:
                    message.userId = reader.readInt64();
                    break;
                case 3:
                    message.operationType = reader.readEnum();
                    break;
                case 4:
                    message.cost = reader.readDouble();
                    break;
                case 5:
                    message.args = reader.readString();
                    break;
                case 6:
                    reader.readMessage(message.createdAt, () => message.createdAt = dependency_1.Timestamp.deserialize(reader));
                    break;
                case 7:
                    reader.readMessage(message.updatedAt, () => message.updatedAt = dependency_1.Timestamp.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Operation {
        return Operation.deserialize(bytes);
    }
}
export class Record extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: number;
        operationId?: number;
        userBalance?: number;
        deleted?: boolean;
        operationResponse?: string;
        createdAt?: dependency_1.Timestamp;
        updatedAt?: dependency_1.Timestamp;
        operation?: Operation;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("operationId" in data && data.operationId != undefined) {
                this.operationId = data.operationId;
            }
            if ("userBalance" in data && data.userBalance != undefined) {
                this.userBalance = data.userBalance;
            }
            if ("deleted" in data && data.deleted != undefined) {
                this.deleted = data.deleted;
            }
            if ("operationResponse" in data && data.operationResponse != undefined) {
                this.operationResponse = data.operationResponse;
            }
            if ("createdAt" in data && data.createdAt != undefined) {
                this.createdAt = data.createdAt;
            }
            if ("updatedAt" in data && data.updatedAt != undefined) {
                this.updatedAt = data.updatedAt;
            }
            if ("operation" in data && data.operation != undefined) {
                this.operation = data.operation;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set id(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get operationId() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set operationId(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get userBalance() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
    }
    set userBalance(value: number) {
        pb_1.Message.setField(this, 4, value);
    }
    get deleted() {
        return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
    }
    set deleted(value: boolean) {
        pb_1.Message.setField(this, 5, value);
    }
    get operationResponse() {
        return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
    }
    set operationResponse(value: string) {
        pb_1.Message.setField(this, 6, value);
    }
    get createdAt() {
        return pb_1.Message.getWrapperField(this, dependency_1.Timestamp, 7) as dependency_1.Timestamp;
    }
    set createdAt(value: dependency_1.Timestamp) {
        pb_1.Message.setWrapperField(this, 7, value);
    }
    get has_createdAt() {
        return pb_1.Message.getField(this, 7) != null;
    }
    get updatedAt() {
        return pb_1.Message.getWrapperField(this, dependency_1.Timestamp, 8) as dependency_1.Timestamp;
    }
    set updatedAt(value: dependency_1.Timestamp) {
        pb_1.Message.setWrapperField(this, 8, value);
    }
    get has_updatedAt() {
        return pb_1.Message.getField(this, 8) != null;
    }
    get operation() {
        return pb_1.Message.getWrapperField(this, Operation, 9) as Operation;
    }
    set operation(value: Operation) {
        pb_1.Message.setWrapperField(this, 9, value);
    }
    get has_operation() {
        return pb_1.Message.getField(this, 9) != null;
    }
    static fromObject(data: {
        id?: number;
        operationId?: number;
        userBalance?: number;
        deleted?: boolean;
        operationResponse?: string;
        createdAt?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
        updatedAt?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
        operation?: ReturnType<typeof Operation.prototype.toObject>;
    }): Record {
        const message = new Record({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.operationId != null) {
            message.operationId = data.operationId;
        }
        if (data.userBalance != null) {
            message.userBalance = data.userBalance;
        }
        if (data.deleted != null) {
            message.deleted = data.deleted;
        }
        if (data.operationResponse != null) {
            message.operationResponse = data.operationResponse;
        }
        if (data.createdAt != null) {
            message.createdAt = dependency_1.Timestamp.fromObject(data.createdAt);
        }
        if (data.updatedAt != null) {
            message.updatedAt = dependency_1.Timestamp.fromObject(data.updatedAt);
        }
        if (data.operation != null) {
            message.operation = Operation.fromObject(data.operation);
        }
        return message;
    }
    toObject() {
        const data: {
            id?: number;
            operationId?: number;
            userBalance?: number;
            deleted?: boolean;
            operationResponse?: string;
            createdAt?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
            updatedAt?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
            operation?: ReturnType<typeof Operation.prototype.toObject>;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.operationId != null) {
            data.operationId = this.operationId;
        }
        if (this.userBalance != null) {
            data.userBalance = this.userBalance;
        }
        if (this.deleted != null) {
            data.deleted = this.deleted;
        }
        if (this.operationResponse != null) {
            data.operationResponse = this.operationResponse;
        }
        if (this.createdAt != null) {
            data.createdAt = this.createdAt.toObject();
        }
        if (this.updatedAt != null) {
            data.updatedAt = this.updatedAt.toObject();
        }
        if (this.operation != null) {
            data.operation = this.operation.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id != 0)
            writer.writeInt64(1, this.id);
        if (this.operationId != 0)
            writer.writeInt64(2, this.operationId);
        if (this.userBalance != 0)
            writer.writeDouble(4, this.userBalance);
        if (this.deleted != false)
            writer.writeBool(5, this.deleted);
        if (this.operationResponse.length)
            writer.writeString(6, this.operationResponse);
        if (this.has_createdAt)
            writer.writeMessage(7, this.createdAt, () => this.createdAt.serialize(writer));
        if (this.has_updatedAt)
            writer.writeMessage(8, this.updatedAt, () => this.updatedAt.serialize(writer));
        if (this.has_operation)
            writer.writeMessage(9, this.operation, () => this.operation.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Record {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Record();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readInt64();
                    break;
                case 2:
                    message.operationId = reader.readInt64();
                    break;
                case 4:
                    message.userBalance = reader.readDouble();
                    break;
                case 5:
                    message.deleted = reader.readBool();
                    break;
                case 6:
                    message.operationResponse = reader.readString();
                    break;
                case 7:
                    reader.readMessage(message.createdAt, () => message.createdAt = dependency_1.Timestamp.deserialize(reader));
                    break;
                case 8:
                    reader.readMessage(message.updatedAt, () => message.updatedAt = dependency_1.Timestamp.deserialize(reader));
                    break;
                case 9:
                    reader.readMessage(message.operation, () => message.operation = Operation.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Record {
        return Record.deserialize(bytes);
    }
}
