/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 0.0.0
 * source: users/structures.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../google/protobuf/timestamp";
import * as pb_1 from "google-protobuf";
export enum UserStatus {
    ACTIVE = 0,
    INACTIVE = 1
}
export class User extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: number;
        username?: string;
        createdAt?: dependency_1.Timestamp;
        updatedAt?: dependency_1.Timestamp;
        status?: UserStatus;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("username" in data && data.username != undefined) {
                this.username = data.username;
            }
            if ("createdAt" in data && data.createdAt != undefined) {
                this.createdAt = data.createdAt;
            }
            if ("updatedAt" in data && data.updatedAt != undefined) {
                this.updatedAt = data.updatedAt;
            }
            if ("status" in data && data.status != undefined) {
                this.status = data.status;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set id(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get username() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set username(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get createdAt() {
        return pb_1.Message.getWrapperField(this, dependency_1.Timestamp, 3) as dependency_1.Timestamp;
    }
    set createdAt(value: dependency_1.Timestamp) {
        pb_1.Message.setWrapperField(this, 3, value);
    }
    get has_createdAt() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get updatedAt() {
        return pb_1.Message.getWrapperField(this, dependency_1.Timestamp, 4) as dependency_1.Timestamp;
    }
    set updatedAt(value: dependency_1.Timestamp) {
        pb_1.Message.setWrapperField(this, 4, value);
    }
    get has_updatedAt() {
        return pb_1.Message.getField(this, 4) != null;
    }
    get status() {
        return pb_1.Message.getFieldWithDefault(this, 5, UserStatus.ACTIVE) as UserStatus;
    }
    set status(value: UserStatus) {
        pb_1.Message.setField(this, 5, value);
    }
    static fromObject(data: {
        id?: number;
        username?: string;
        createdAt?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
        updatedAt?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
        status?: UserStatus;
    }): User {
        const message = new User({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.username != null) {
            message.username = data.username;
        }
        if (data.createdAt != null) {
            message.createdAt = dependency_1.Timestamp.fromObject(data.createdAt);
        }
        if (data.updatedAt != null) {
            message.updatedAt = dependency_1.Timestamp.fromObject(data.updatedAt);
        }
        if (data.status != null) {
            message.status = data.status;
        }
        return message;
    }
    toObject() {
        const data: {
            id?: number;
            username?: string;
            createdAt?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
            updatedAt?: ReturnType<typeof dependency_1.Timestamp.prototype.toObject>;
            status?: UserStatus;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.username != null) {
            data.username = this.username;
        }
        if (this.createdAt != null) {
            data.createdAt = this.createdAt.toObject();
        }
        if (this.updatedAt != null) {
            data.updatedAt = this.updatedAt.toObject();
        }
        if (this.status != null) {
            data.status = this.status;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id != 0)
            writer.writeInt64(1, this.id);
        if (this.username.length)
            writer.writeString(2, this.username);
        if (this.has_createdAt)
            writer.writeMessage(3, this.createdAt, () => this.createdAt.serialize(writer));
        if (this.has_updatedAt)
            writer.writeMessage(4, this.updatedAt, () => this.updatedAt.serialize(writer));
        if (this.status != UserStatus.ACTIVE)
            writer.writeEnum(5, this.status);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): User {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new User();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readInt64();
                    break;
                case 2:
                    message.username = reader.readString();
                    break;
                case 3:
                    reader.readMessage(message.createdAt, () => message.createdAt = dependency_1.Timestamp.deserialize(reader));
                    break;
                case 4:
                    reader.readMessage(message.updatedAt, () => message.updatedAt = dependency_1.Timestamp.deserialize(reader));
                    break;
                case 5:
                    message.status = reader.readEnum();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): User {
        return User.deserialize(bytes);
    }
}
